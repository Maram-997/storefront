{"ast":null,"code":"var _jsxFileName = \"/home/maram997/storefront/src/components/product.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { connect } from \"react-redux\";\nimport { addProduct, addItem } from \"../store/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyle = makeStyles(theme => ({\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\"\n  },\n  cardContent: {\n    flexGrow: 1\n  }\n}));\n\nconst Products = props => {\n  _s();\n\n  const classes = useStyle();\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: classes.cardGrid,\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 4,\n      children: props.products.map(product => {\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.card,\n            children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n              className: classes.cardMedia,\n              image: product.img,\n              title: product.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n              className: classes.cardContent,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                variant: \"h5\",\n                component: \"h2\",\n                children: product.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                children: [\"Category: \", product.categoryAssociation, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 51,\n                  columnNumber: 61\n                }, this), \"Price: \", product.price, \" Jd \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 52,\n                  columnNumber: 47\n                }, this), \"Inventory: \", product.inventoryCount]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                children: \"View\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: inventory => {\n                  if (product.inventoryCount) {\n                    props.addItem(product);\n                    props.addProduct(product);\n                  } else {\n                    alert(\"empty item\");\n                  }\n                },\n                children: \"Add to Cart\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this)\n        }, product.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Products, \"eTC39ZLyyKld6i5R1gil2d/OHGM=\", false, function () {\n  return [useStyle];\n});\n\n_c = Products;\n\nconst mapStateToProps = state => ({\n  products: state.productsReducer.activeProduct,\n  activeCategory: state.Categor.activeCategory\n});\n\nconst mapDispatchToProps = {\n  addItem,\n  addProduct\n}; // addItem to add product when to category\n// addProduct to add product to cart\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Products);\n\nvar _c;\n\n$RefreshReg$(_c, \"Products\");","map":{"version":3,"sources":["/home/maram997/storefront/src/components/product.js"],"names":["React","Button","Card","CardActions","CardContent","CardMedia","Grid","Typography","Container","makeStyles","connect","addProduct","addItem","useStyle","theme","cardGrid","paddingTop","spacing","paddingBottom","card","height","display","flexDirection","cardMedia","cardContent","flexGrow","Products","props","classes","products","map","product","img","name","categoryAssociation","price","inventoryCount","inventory","alert","mapStateToProps","state","productsReducer","activeProduct","activeCategory","Categor","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { connect } from \"react-redux\";\nimport { addProduct, addItem } from \"../store/actions\";\n\nconst useStyle = makeStyles((theme) => ({\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\",\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n}));\n\nconst Products = (props) => {\n  const classes = useStyle();\n  return (\n    <Container className={classes.cardGrid} maxWidth=\"md\">\n      <Grid container spacing={4}>\n        {props.products.map((product) => {\n          return (\n            <Grid item key={product.name} xs={12} sm={6} md={4}>\n              <Card className={classes.card}>\n                <CardMedia\n                  className={classes.cardMedia}\n                  image={product.img}\n                  title={product.name}\n                />\n                <CardContent className={classes.cardContent}>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    {product.name}\n                  </Typography>\n                  <Typography>\n                    Category: {product.categoryAssociation} <br />\n                    Price: {product.price} Jd <br />\n                    Inventory: {product.inventoryCount}\n                  </Typography>\n                </CardContent>\n                <CardActions>\n                  <Button size=\"small\" color=\"primary\">\n                    View\n                  </Button>\n                  <Button\n                    size=\"small\"\n                    color=\"primary\"\n                    onClick={(inventory) => {\n                      if (product.inventoryCount) {\n                        props.addItem(product);\n                        props.addProduct(product);\n                      } else {\n                        alert(\"empty item\");\n                      }\n                    }}\n                  >\n                    Add to Cart\n                  </Button>\n                </CardActions>\n              </Card>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Container>\n  );\n\n\n}\n\n\nconst mapStateToProps = (state) => ({\n  products: state.productsReducer.activeProduct,\n  activeCategory: state.Categor.activeCategory,\n})\n\nconst mapDispatchToProps = { addItem, addProduct };\n// addItem to add product when to category\n// addProduct to add product to cart\nexport default connect(mapStateToProps,mapDispatchToProps)(Products);\n\n\n"]},"metadata":{},"sourceType":"module"}